{{define "fnParams" }}ctx context.Context
    {{- .PathParams | genParamArgs -}}
    {{if .RequiresParamObject}}, params *{{.OperationId}}Params{{ end -}}
    {{if .HasBody}}, body *{{ (.Bodies | bestBody).Schema.GoType }}{{ end -}}
    {{- end -}}{{/*- end block params -*/}}


type GeneralHTTPError struct {
  Response *resty.Response
  JSON map[string]any
  Text string
}

var errorTypes = map[int]string{
            1: "informational response",
            3: "redirect response",
            4: "client error",
            5: "server error",
        }

func (e GeneralHTTPError) Error() string {
	var b strings.Builder
	kind, ok := errorTypes[e.Response.StatusCode() / 100]
	if !ok { kind = "unknown HTTP error"}
	fmt.Fprintf(&b, "%s '%s'", kind, e.Response.Status())
	if e.JSON != nil {
		fmt.Fprintf(&b, " %v", e.JSON)
	} else {
		fmt.Fprintf(&b, " content=%q", e.Text)
	}
	return b.String()
}

func HandleError(client *resty.Client, resp *resty.Response) error {
	if !resp.IsError() {
		return nil
	}

	e := GeneralHTTPError{Response: resp}

	e.Text = resp.String()
	if resp.Header().Get("content-type") == "application/json" {
		if json.Unmarshal([]byte(e.Text), &e.JSON) == nil {
			e.Text = ""
		}
	}

	// Set the parsed error back into the object so `resp.Error()` returns the populated one!
	resp.Request.SetError(&e)

	return &e
}

{{range $tag, $ops := . | operationsByTag -}}
{{end}}{{/* operationsByTag -*/}}


{{range $tag, $ops := . | operationsByTag -}}
{{- $class := printf "%s%s" ($tag | tagToClass | lcFirst) "Client" -}}

type {{ $class }} struct {
  *resty.Client
}
{{- range $op := $ops }}
{{- $localOpid := $op | convertOperationWithTag $tag }}
{{- with $op }}

{{ $responseTypeName := "any" -}}
{{ $responseTypeDefinitions := getResponseTypeDefinitions . -}}
{{ $hasRespType := ge ($responseTypeDefinitions | len) 1 -}}
{{ if $hasRespType -}}
{{ $responseTypeName = (index $responseTypeDefinitions 0).Schema.GoType -}}
{{ end -}}

// {{ $localOpid }}Response performs the HTTP request and returns the lower level [resty.Response]
func (c *{{ $class }}) {{ $localOpid }}Response({{ template "fnParams" . }}) (resp *resty.Response, err error) {
	{{ $hasRequiredParams := hasRequiredParams . -}}
	{{ if $hasRequiredParams -}}
	if params == nil {
		return nil, fmt.Errorf("{{ $localOpid }} requires a non-nil params argument")
	}
	{{- end }}
    {{ if $hasRespType -}}
    var res {{ $responseTypeName }}
    {{- end }}

	req := c.R().SetContext(ctx)
    {{- if $hasRespType -}}
      .SetResult(&res)
    {{- end }}

{{range $paramIdx, $param := .PathParams -}}
	{{ $paramName := printf "%q" $param.ParamName -}}
    {{if .IsPassThrough}}
    req.SetPathParam({{ $paramName }}, {{.GoVariableName}})
    {{- else if .IsStyled}}
	{ {{/*- scope `pathParam` so we can reuse the var name */}}
    pathParam, err := runtime.StyleParamWithLocation("{{.Style}}", {{.Explode}}, {{ $paramName }}, runtime.ParamLocationPath, {{.GoVariableName}})
    if err != nil {
        return nil, err
    }
    req.SetPathParam({{$paramName}}, pathParam)
	}
    {{end -}}
{{ end -}}{{/* range .PathParams */}}
{{range $paramIdx, $param := .Params -}}
	{{ $paramVar := printf "path%d" $paramIdx }}
	{{ $paramName := printf "%q" $param.ParamName -}}
    {{if .IsPassThrough -}}
		{{ $paramVar = .GoVariableName -}}
    {{else if .IsJson -}}
		var paramBuf{{$paramIdx}} []byte
		paramBuf{{$paramIdx}}, err = json.Marshal({{.GoVariableName}})
		if err != nil {
			return nil, err
		}
		{{$paramVar}} := string(paramBuf{{$paramIdx}})
    {{end}}
    {{if .IsStyled}}
		{{if .IndirectOptional }}
		if {{- if not $hasRequiredParams }} params != nil &&{{ end }} params.{{.GoName}} != nil {
		{{- else}}{{/* Create a scope block so `exploded` is only in scope for a short while */ -}}
		{
		{{- end -}}

		{{- if and .Explode (eq .In "query") -}}
			{{/*- When we are exploding a path param, we want to use StyleParamWithLocation to get the correct style
			and param etc, but it gives us a string, so we need to parse it back to get the url.Values -*/}}
			exploded, err := runtime.StyleParamWithLocation("{{.Style}}", {{.Explode}}, "{{.ParamName}}", runtime.ParamLocation{{ .In | ucFirst }}, params.{{.GoName}})
			if err != nil {
				return nil, err
			}
			vals, err := url.ParseQuery(exploded)
			if err != nil {
				return nil, err
			}
			req.SetQueryParamsFromValues(vals)

		{{- else }}
			{{$paramVar}}, err := runtime.StyleParamWithLocation("{{.Style}}", {{.Explode}}, "{{.ParamName}}", runtime.ParamLocation{{ .In | ucFirst }}, params.{{.GoName}})
			if err != nil {
				return nil, err
			}
			req.{{ paramLocationToSetter $param }}({{$paramName}}, {{$paramVar}})
		{{end -}}
    {{end -}}
	}
{{ end -}}{{/* range .Params */}}

    {{ if .BodyRequired -}}
    if body == nil {
      return nil, fmt.Errorf("{{ $localOpid }} requires a non-nil body argument")
    }
    {{ end -}}
    resp, err = req.
    {{if .HasBody -}}
    SetContentType("application/json").
    SetBody(body).
    {{end -}}
      {{ $op.Method | lower | title }}("
        {{- /* If .Path starts with '/' (0x2f) strip it off */ -}}
        {{- if eq (index .Path 0) 0x2f -}}
            {{ slice .Path 1 -}}
        {{- else -}}
            {{ .Path }}
        {{- end }}")
    if err != nil {
        return resp, err
    }
    return resp, HandleError(c.Client, resp)
}

func (c *{{ $class }}) {{ $localOpid }}({{ template "fnParams" . -}}
  {{- if $hasRespType -}}
  ) (*{{ $responseTypeName }}, error) {
    res, err := c.{{ $localOpid }}Response(ctx{{genParamNames .PathParams}}
      {{- if .RequiresParamObject}}, params{{ end -}}
      {{- if .HasBody }}, body{{ end }})
    if err != nil {
      return nil, err
    }

    return res.Result().(*{{ $responseTypeName }}), nil
{{- else -}}
  ) error {
    _, err := c.{{ $localOpid }}Response(ctx{{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{ end -}}{{- if .HasBody }}, body{{ end }})
    return err
{{- end }}
}

{{end }}{{/* with $op -*/}}
{{end }}{{/* operations -*/}}
{{end}}{{/* operationsByTag -*/}}

{{range $tag, $ops := . | operationsByTag -}}

{{- $iface := printf "%sClient" ($tag | tagToClass) -}}
{{- $class := ($iface | lcFirst) -}}
type {{ $iface }} interface {
{{- range $op := $ops }}
{{- $localOpid := $op | convertOperationWithTag $tag }}
{{ $responseTypeName := "any" -}}
{{ $responseTypeDefinitions := getResponseTypeDefinitions . -}}
{{ $hasRespType := ge ($responseTypeDefinitions | len) 1 -}}
{{ if $hasRespType -}}
{{ $responseTypeName = (index $responseTypeDefinitions 0).Schema.GoType -}}
{{ end -}}
  {{ toGoComment $op.Spec.Description "" }}
  {{ $localOpid }}({{block "params" $op }}ctx context.Context
    {{- .PathParams | genParamArgs -}}
    {{if .RequiresParamObject}}, params *{{.OperationId}}Params{{ end -}}
    {{if .HasBody}}, body *{{ (.Bodies | bestBody).Schema.GoType }}{{ end -}}
    {{- end -}}{{/*- end block params -*/}}
  {{- if $hasRespType -}}
  ) (*{{ $responseTypeName }}, error)
{{- else -}}
  ) error
{{- end }}
  // {{ $localOpid }}Response is a lower level version of [{{ $localOpid }}] and provides access to the raw [resty.Response]
  {{ $localOpid }}Response({{ template "params" $op }}) (*resty.Response, error)

{{ end -}}
}
var _ {{ $iface }} = (*{{ $class }})(nil)
{{end}}{{/* operationsByTag -*/}}
