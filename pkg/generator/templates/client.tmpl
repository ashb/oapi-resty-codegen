{{$clientTypeName := opts.OutputOptions.ClientTypeName -}}

// {{ $clientTypeName }} which conforms to the OpenAPI3 specification for this service.
type {{ $clientTypeName }} struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	*resty.Client

	RequestMiddleware []resty.RequestMiddleware
}
// ClientOption allows setting custom parameters during construction
type ClientOption func(*{{ $clientTypeName }}) error

func New{{ $clientTypeName }}(server string, opts ...ClientOption) ({{ $clientTypeName }}Interface, error) {
	// create a client with sane default values
	client := {{ $clientTypeName }}{
		Server: server,
		Client: resty.New(),
	}
	client.Client.SetBaseURL(client.Server)
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}

	return &client, nil
}

// WithClient allows overriding the default [resty.Client], which is
// automatically created using http.Client.
//
// If this is used the `server` base URL argument passed in will not be respected anymore
func WithClient(r *resty.Client) ClientOption {
	return func(c *{{ $clientTypeName }}) error {
		c.Client = r
		return nil
	}
}

// WithRoundTripper method sets custom http.Transport or any http.RoundTripper
// compatible interface implementation in the Resty client
func WithRoundTripper(transport http.RoundTripper) ClientOption {
	return func(c *{{ $clientTypeName }}) error {
		c.Client.SetTransport(transport)
		return nil
	}
}

// WithRequestMiddleware allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestMiddleware(mw resty.RequestMiddleware) ClientOption {
	return func(c *{{ $clientTypeName }}) error {
		c.RequestMiddleware = append(c.RequestMiddleware, mw)
		c.Client = c.Client.AddRequestMiddleware(mw)
		return nil
	}
}

{{range $tag, $ops := . | operationsByTag -}}
func (c *{{ $clientTypeName }}){{ $tag | tagToClass }}() {{ $tag | tagToClass }}Client {
	return &{{ printf "%s%s" ($tag | tagToClass | lcFirst) "Client"}}{c.Client}
}
{{end}}{{/* operationsByTag -*/}}

type {{ $clientTypeName }}Interface interface {
{{range $tag, $ops := . | operationsByTag -}}
	// {{ $tag | tagToClass }} deals with all the {{ $tag }} endpoints
	{{ $tag | tagToClass }}() {{ $tag | tagToClass }}Client
{{end}}{{/* operationsByTag -*/}}

{{/*
{{range $op := . | untaggedOperations -}}
{{ $opid := .OperationId -}}
{{ $responseTypeName := "any" -}}
{{ $responseTypeDefinitions := getResponseTypeDefinitions . -}}
{{ $hasRespType := ge ($responseTypeDefinitions | len) 1 -}}
{{ if $hasRespType -}}
{{ $responseTypeName = (index $responseTypeDefinitions 0).Schema.GoType -}}
{{ end -}}
	{{ toGoComment $op.Spec.Description "" }}
	{{ $opid }}({{block "params" $op }}ctx context.Context
		{{- .PathParams | genParamArgs -}}
		{{if .RequiresParamObject}}, params *{{.OperationId}}Params{{ end -}}
		{{if .HasBody}}, body *{{ (.Bodies | bestBody).Schema.GoType }}{{ end -}}
		{{- end -}}{{/*- end block params -* /}}
	{{- if $hasRespType -}}
	) (*{{ $responseTypeName }}, error)
{{- else -}}
  ) error
{{end -}}
{{end}}{{/* untaggedOperations -*/}}
}
